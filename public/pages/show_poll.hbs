<!DOCTYPE html>

<html>

	<head>
		<title>VoterR App</title>
		<link href="/public/css/main.css" rel="stylesheet" type="text/css">
		<meta name="viewport" content="width=device-width, initial-scale=1, user-scalable=no">
	</head>

	<body>
	  <div class="fullscreen container">
	  {{#if logged}}
  		<nav>
			<p class="welcomeUser"><span class="hideInMobile">You are logged in as </span><span id="display-name"></span></p>
  			<div class="loginCont">
  				<a class="menu" href="/">Home</a>
  				<p>|</p>
  				<a class="menu" href="/new_poll">New Poll</a>
  				<p> | </p>
  				<a class="menu" href="/logout">Logout</a>
  			</div>
  		</nav>
  	{{else}}
      <nav>
  			<div class="login">
  				<a href="/auth/github">
  					<div class="btn" id="login-btn">
  						<img src="/public/img/github_32px.png" alt="github logo" />
  						<p>LOGIN WITH GITHUB</p>
  					</div>
  				</a>
  			</div>
  			<div class="loginCont">
  			  <a class="menu" href="/">Home</a>
  			</div>
  		</nav>
		{{/if}}
		
  		<main class="voting">
  		  <h1>{{title}}</h1>
  		  <div class="display">
          <form class="votingForm" action="/polls/{{id}}/vote" method="post">
            <select name="label" required>
            {{#each labelsNames}}
              <option value="{{this}}">{{this}}</option>
            {{/each}}
            </select>
            <input type="submit" value="Submit">
            {{#if owner}}
            <input type="button" value="Delete" id="delBtn">
            {{/if}}
          </form>
          <div class="chartCont">
            <div id="chart"></div>
          </div>
  		  </div>
  		</main>
    </div>
    {{#if logged}}
      <script type="text/javascript" src="/public/js/userController.js"></script>
    {{/if}}
		<script src="https://cdnjs.cloudflare.com/ajax/libs/d3/4.9.1/d3.min.js"></script>
    <script>
      
      var deleteButton = document.getElementById("delBtn");
      var deleteUrl = location.origin + '/polls/' + '{{{id}}}';
      var redirectUrl = location.origin;
      deleteButton.addEventListener('click', function() {
        /*
          var xhr = new XMLHttpRequest();
          xhr.onload = function () {
            if (xhr.readyState === 4 && xhr.status === 200) {
                console.log("delete poll response: " + xhr.response);
            } else {
                console.error(xhr.response);
            }
            window.location.replace(redirectUrl);
          }
          xhr.open('DELETE', deleteUrl, true);
          xhr.send();
          */
          window.fetch(deleteUrl, {method: 'delete'}).then(response => response.json());
      });
      
      (function(d3) {
        
        //dataset
        var dataset = JSON.parse('{{{labels}}}');
        var datasetKeys = Object.keys(dataset);
        var datasetValues = Object.values(dataset);
        var datasetArray = datasetKeys.map(function(key,idx){
          return {[key]: datasetValues[idx]};
        });
        
        //svg chart
        var width = 360;
        var height = 360;
        var svg = d3.select('#chart')
          .append('svg')
          .attr('width', width)
          .attr('height', height)
          .append('g')
          .attr('transform', 'translate(' + (width / 2) +
            ',' + (height / 2) + ')');
    
        //donut
        var color = d3.scaleOrdinal(d3.schemeCategory10);
        var radius = Math.min(width, height) / 2;
        var donutWidth = 80;
        var arc = d3.arc()
          .innerRadius(radius - donutWidth)
          .outerRadius(radius);
        var pie = d3.pie()
          .value(function(d) { 
            return Object.values(d)[0] })
          .sort(null);
        var path = svg.selectAll('path')
          .data(pie(datasetArray))
          .enter()
          .append('path')
          .attr('d', arc)
          .attr('fill', function(d) {
            return color(Object.keys(d.data)[0]);
          });
          
        //tooltip
        var tooltip = d3.select('#chart')                               
          .append('div')                                                
          .attr('class', 'tooltip');                                    
        tooltip.append('div')                                           
          .attr('class', 'label');                                      
        tooltip.append('div')                                           
          .attr('class', 'count');                                      
        tooltip.append('div')                                           
          .attr('class', 'percent');          
        path.on('mouseover', function(d) {                           
            var total = d3.sum(datasetArray.map(function(d) {
              return Object.values(d)[0];                                     
            }));                                          
            var percent = Math.round(1000 * Object.values(d.data)[0] / total) / 10; 
            tooltip.select('.label').html(Object.keys(d.data)[0]);         
            tooltip.select('.count').html("votes: " + Object.values(d.data)[0]);         
            tooltip.select('.percent').html(percent + '%');
            tooltip.style('display', 'block');
        });                                                          
        path.on('mouseout', function() {                             
          tooltip.style('display', 'none');                           
        });
        path.on('mousemove', function(d) {    
          tooltip.style('top', (d3.event.layerY + 10) + 'px')         
            .style('left', (d3.event.layerX + 10) + 'px');            
        });
        
        //legend
        var legendRectSize = 18;                                  
        var legendSpacing = 4;                                    
        var legend = svg.selectAll('.legend')                     
          .data(color.domain())                                   
          .enter()                                                
          .append('g')                                            
          .attr('class', 'legend')                                
          .attr('transform', function(d, i) {                     
            var height = legendRectSize + legendSpacing;          
            var offset =  height * color.domain().length / 2;     
            var horz = -2.5 * legendRectSize;                       
            var vert = i * height - offset;                       
            return 'translate(' + horz + ',' + vert + ')';        
          });                                                     
        legend.append('rect')                                     
          .attr('width', legendRectSize)                          
          .attr('height', legendRectSize)                         
          .style('fill', color)                                   
          .style('stroke', color);                                
        legend.append('text')                                     
          .attr('x', legendRectSize + legendSpacing)              
          .attr('y', legendRectSize - legendSpacing)              
          .text(function(d) { 
            if(d.length > 10) {
              var str= d.substr(0,10);
              if(str.slice(-1) !== " ") {
                return str + "..";
              } else {
                return str.substr(0,9) + "..";
              }
            } else {
              return d;
            }
          });                       

      })(window.d3);
      
    </script>
    
	</body>

</html>